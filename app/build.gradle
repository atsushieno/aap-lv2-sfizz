plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    namespace 'org.androidaudioplugin.ports.lv2.sfizz'
    compileSdk = libs.versions.android.compileSdk.get().toInteger()

    defaultConfig {
        applicationId "org.androidaudioplugin.ports.lv2.sfizz"
        minSdk = libs.versions.android.minSdk.get().toInteger()
        versionCode 1
        versionName libs.versions.aap.lv2.get()

        ndk {
            // should we make it customizable? We skip others just to reduce build time.
            abiFilters "x86_64", "arm64-v8a"
        }
        externalNativeBuild {
            cmake {
                arguments "-DSFIZZ_USE_SNDFILE=0", "-DENABLE_LTO=off", "-DSFIZZ_VST=off", "-DSFIZZ_LV2_UI=off", "-DSFIZZ_JACK=off", "-DSFIZZ_RENDER=off", "-DSFIZZ_SHARED=off", "-DANDROID_STL=c++_shared", "-DAAP_ENABLE_ASAN=" + (enable_asan ? "1" : "0")
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    ndkVersion libs.versions.ndk.get()

    buildTypes {
        debug {
            packagingOptions {
                doNotStrip "**/*.so"
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "../external/sfizz/CMakeLists.txt"
        }
    }
    buildFeatures {
        prefab true
    }

    packagingOptions {
        jniLibs.useLegacyPackaging = enable_asan
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    androidResources {
        noCompress 'wav'
    }
}

dependencies {
    implementation libs.aap.lv2
    implementation libs.aap.core
    implementation libs.aap.midi.device.service
    implementation libs.aap.ui.compose.app
    implementation libs.aap.ui.web
    androidTestImplementation libs.aap.testing
    //  If you want to test aap-core and aap-lv2 locally, switch to these local references
    //  (along with settings.gradle.kts changes)
    /*
    implementation project(":androidaudioplugin-lv2")
    implementation project(":androidaudioplugin")
    implementation project(":androidaudioplugin-midi-device-service")
    implementation project(":androidaudioplugin-ui-compose-app")
    implementation project(":androidaudioplugin-ui-web")
    androidTestImplementation project(":androidaudioplugin-testing")
     */

    implementation libs.androidx.appcompat
    implementation libs.startup.runtime

    testImplementation libs.junit
    androidTestImplementation libs.test.ext.junit
}


tasks.register('deleteLV2Manifests', Delete) {
    delete 'src/main/assets/lv2/sfizz.lv2'
}

tasks.configureEach { task ->
    // FIXME: it's hacky, but `clean` didn't work.
    if (task.name == "externalNativeBuildCleanDebug" || task.name == "externalNativeBuildCleanRelease")
        task.dependsOn deleteLV2Manifests
}

afterEvaluate {
    // LV2 ttl resources are copied at CMake build.
    // Thus collecting assets must wait for the native build.
    // But Gradle does not know that it has to wait,
    // so declare task dependency here.
    tasks.named("mergeDebugAssets").configure {it.mustRunAfter("mergeDebugNativeLibs") }
    tasks.named("mergeReleaseAssets").configure {it.mustRunAfter("mergeReleaseNativeLibs") }
}
