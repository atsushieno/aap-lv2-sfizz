plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 29
        targetSdkVersion 30
        versionCode 1
        versionName "0.1.13"

        externalNativeBuild {
            cmake {
                arguments "-DSFIZZ_USE_SNDFILE=0", "-DENABLE_LTO=off", "-DSFIZZ_VST=off", "-DSFIZZ_LV2_UI=off", "-DSFIZZ_JACK=off", "-DSFIZZ_RENDER=off", "-DSFIZZ_SHARED=off"
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
    ndkVersion "21.3.6528147"

    buildTypes {
        debug {
            packagingOptions {
                doNotStrip "**/*.so"
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "../external/sfizz/CMakeLists.txt"
        }
    }
    // FIXME: enable these sections once we migrated to prefab.
    /*
    buildFeatures {
        prefab true
    }
    */

    aaptOptions {
        noCompress 'wav'
    }

    // AGP, Android Lint, and/or appcompat package is stupid and results in their own error to block our builds.
    // > androidx.appcompat.AppCompatIssueRegistry in /home/runner/.gradle/caches/transforms-2/files-2.1/2dfc7e2f9c4e61e976acb8f06b4a9014/appcompat-1.2.0/jars/lint.jar does not specify a vendor; see IssueRegistry#vendor
    // This is a suggested workaround (by AGP or Gradle)
    lintOptions {
        abortOnError false
    }

    packagingOptions {
        //doNotStrip "*/*/*.so" // debuggable!
    }
}

dependencies {
    implementation 'org.androidaudioplugin:androidaudioplugin-lv2:0.1.13'
    implementation 'org.androidaudioplugin:androidaudioplugin-ui-traditional:0.6.12'
    implementation 'org.androidaudioplugin:androidaudioplugin-midi-device-service:0.6.12'
    implementation 'androidx.appcompat:appcompat:1.2.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task copyLv2Manifests(type: Copy) {
    from(".cxx/cmake/debug/x86/sfizz.lv2") {
        exclude '**/*.so'
    }
    into 'src/main/assets/lv2/sfizz.lv2'
}

// I don't know if there is any better scripting approach in build.gradle, not sure if I will learn that before migrating to build.gradle.kts...
task copyLV2SharedX86DebugLibs(type: Copy) { from(".cxx/cmake/debug/x86/sfizz.lv2") { include '**/*.so' } into 'src/main/jniLibs/x86' }
task copyLV2SharedX64DebugLibs(type: Copy) { from(".cxx/cmake/debug/x86_64/sfizz.lv2") { include '**/*.so' } into 'src/main/jniLibs/x86_64' }
task copyLV2SharedArm32DebugLibs(type: Copy) { from(".cxx/cmake/debug/armeabi-v7a/sfizz.lv2") { include '**/*.so' } into 'src/main/jniLibs/armeabi-v7a' }
task copyLV2SharedArm64DebugLibs(type: Copy) { from(".cxx/cmake/debug/arm64-v8a/sfizz.lv2") { include '**/*.so' } into 'src/main/jniLibs/arm64-v8a' }
task copyLV2SharedX86ReleaseLibs(type: Copy) { from(".cxx/cmake/release/x86/sfizz.lv2") { include '**/*.so' } into 'src/main/jniLibs/x86' }
task copyLV2SharedX64ReleaseLibs(type: Copy) { from(".cxx/cmake/release/x86_64/sfizz.lv2") { include '**/*.so' } into 'src/main/jniLibs/x86_64' }
task copyLV2SharedArm32ReleaseLibs(type: Copy) { from(".cxx/cmake/release/armeabi-v7a/sfizz.lv2") { include '**/*.so' } into 'src/main/jniLibs/armeabi-v7a' }
task copyLV2SharedArm64ReleaseLibs(type: Copy) { from(".cxx/cmake/release/arm64-v8a/sfizz.lv2") { include '**/*.so' } into 'src/main/jniLibs/arm64-v8a' }

task deleteLV2Manifests(type: Delete) {
    delete 'src/main/assets/lv2/sfizz.lv2'
}

tasks.whenTaskAdded { task ->
    if (task.name == "packageDebug") {
        task.dependsOn copyLV2SharedX86DebugLibs
        task.dependsOn copyLV2SharedX64DebugLibs
        task.dependsOn copyLV2SharedArm32DebugLibs
        task.dependsOn copyLV2SharedArm64DebugLibs
    }
    if (task.name == "packageRelease") {
        task.dependsOn copyLV2SharedX86ReleaseLibs
        task.dependsOn copyLV2SharedX64ReleaseLibs
        task.dependsOn copyLV2SharedArm32ReleaseLibs
        task.dependsOn copyLV2SharedArm64ReleaseLibs
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == "packageDebug" || task.name == "packageRelease")
        task.dependsOn copyLv2Manifests
    // FIXME: it's hacky, but `clean` didn't work.
    if (task.name == "externalNativeBuildCleanDebug" || task.name == "externalNativeBuildCleanRelease")
        task.dependsOn deleteLV2Manifests
}
